1.题目
从上往下打印出二叉树的每个节点，同层节点从左至右打印。

2.思路
我们可以找到从上到下打印二叉树的规律：每一次打印一个结点的时候，如果该结点有子结点，
则把该结点的子结点放到一个队列的末尾。接下来到队列的头部取出最早进入队列的结点，重复前面的打印操作，直至队列中所有的结点都打印出来为止。


3.c++
class Solution {
public:
    vector<int> PrintFromTopToBottom(TreeNode* root) {
        TreeNode* fr;
        if(root == NULL){
            return result;
        }
        que.push(root);
        while(!que.empty()){
            fr = que.front();
            result.push_back(fr->val);
            if(fr->left != NULL){
                que.push(fr->left);
            }
            if(fr->right != NULL){
                que.push(fr->right);
            }
            que.pop();
        }
        return result;
    }
private:
    vector<int> result;
    queue<TreeNode*> que;
};

4.python
class Solution:
    # 返回从上到下每个节点值列表，例：[1,2,3]
    def PrintFromTopToBottom(self, root):
        # write code here
        if not root:
            return []
        result = []
        tmp = [root]
        while len(tmp):
            cur = tmp.pop(0)
            result.append(cur.val)
            if cur.left:
                tmp.append(cur.left)
            if cur.right:
                tmp.append(cur.right)
        return result
